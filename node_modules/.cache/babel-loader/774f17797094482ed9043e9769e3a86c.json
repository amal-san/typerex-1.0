{"ast":null,"code":"var _jsxFileName = \"/home/amalsan/Github/Typerex/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { gql } from \"apollo-boost\";\nclient.query({\n  query: gql`\n      {\n        rates(currency: \"USD\") {\n          currency\n        }\n      }\n    `\n}).then(result => console.log(result));\n\nconst App = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}));\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/amalsan/Github/Typerex/src/index.js"],"names":["React","ReactDOM","Main","ApolloProvider","gql","client","query","then","result","console","log","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,GAAT,QAAoB,cAApB;AAKAC,MAAM,CACHC,KADH,CACS;AACLA,EAAAA,KAAK,EAAEF,GAAI;;;;;;;AADN,CADT,EAUGG,IAVH,CAUQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAVlB;;AAYA,MAAMG,GAAG,GAAG,mBACV,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEN,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF;;AAQAJ,QAAQ,CAACW,MAAT,eACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { gql } from \"apollo-boost\";\n\n\n\n\nclient\n  .query({\n    query: gql`\n      {\n        rates(currency: \"USD\") {\n          currency\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Main/>\n  </ApolloProvider>\n);\n\n\n\nReactDOM.render(\n  <App/>, \n  document.getElementById(\"root\")\n);"]},"metadata":{},"sourceType":"module"}